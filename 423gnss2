#include <iostream>
#include <sys/epoll.h>
#include <unistd.h>
#include <fcntl.h>
#include <ctype.h> // for toupper and tolower

constexpr int MAX_EVENTS = 2; // We are monitoring 2 descriptors
constexpr int BUF_SIZE = 1024;

void process(int fd_in, int fd_out) {
    char buffer[BUF_SIZE];
    int bytes_read = read(fd_in, buffer, sizeof(buffer));
    if (bytes_read > 0) {
        for (int i = 0; i < bytes_read; ++i) {
            buffer[i] = toupper(buffer[i]);
        }
        write(fd_out, buffer, bytes_read);
    }
}

void process2(int fd_in, int fd_out) {
    char buffer[BUF_SIZE];
    int bytes_read = read(fd_in, buffer, sizeof(buffer));
    if (bytes_read > 0) {
        for (int i = 0; i < bytes_read; ++i) {
            buffer[i] = tolower(buffer[i]);
        }
        write(fd_out, buffer, bytes_read);
    }
}

int main(int argc, char *argv[]) {
    if (argc < 5) {
        std::cerr << "Usage: " << argv[0] << " <fd1> <fd2> <fd3> <fd4>" << std::endl;
        return 1;
    }

    int fd1 = std::stoi(argv[1]);
    int fd2 = std::stoi(argv[2]);
    int fd3 = std::stoi(argv[3]);
    int fd4 = std::stoi(argv[4]);

    int epoll_fd, num_ready;
    struct epoll_event event, events[MAX_EVENTS];

    // Create epoll instance
    epoll_fd = epoll_create1(0);
    if (epoll_fd == -1) {
        perror("epoll_create1 failed");
        return 1;
    }

    // Add fd1 to epoll instance
    event.events = EPOLLIN;
    event.data.fd = fd1;
    if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, fd1, &event) == -1) {
        perror("epoll_ctl: fd1 failed");
        return 1;
    }

    // Add fd2 to epoll instance
    event.events = EPOLLIN;
    event.data.fd = fd2;
    if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, fd2, &event) == -1) {
        perror("epoll_ctl: fd2 failed");
        return 1;
    }

    std::cout << "Listening for events on fd1 and fd2..." << std::endl;

    // Event loop
    while (true) {
        num_ready = epoll_wait(epoll_fd, events, MAX_EVENTS, -1);
        if (num_ready == -1) {
            perror("epoll_wait failed");
            return 1;
        }

        for (int i = 0; i < num_ready; ++i) {
            if (events[i].data.fd == fd1) {
                // fd1 has data ready
                process(fd1, fd3);
            } else if (events[i].data.fd == fd2) {
                // fd2 has data ready
                process2(fd2, fd4);
            }
        }
    }

    return 0;
}
